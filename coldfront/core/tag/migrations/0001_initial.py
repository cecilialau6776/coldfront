# Generated by Django 4.2.23 on 2025-10-24 17:41

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import model_utils.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
    ]

    operations = [
        migrations.CreateModel(
            name="Tag",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=100, unique=True, verbose_name="name"),
                ),
                (
                    "slug",
                    models.SlugField(
                        allow_unicode=True,
                        max_length=100,
                        unique=True,
                        verbose_name="slug",
                    ),
                ),
                (
                    "tn_ancestors_pks",
                    models.TextField(
                        blank=True,
                        default="",
                        editable=False,
                        verbose_name="Ancestors pks",
                    ),
                ),
                (
                    "tn_ancestors_count",
                    models.PositiveIntegerField(
                        default=0, editable=False, verbose_name="Ancestors count"
                    ),
                ),
                (
                    "tn_children_pks",
                    models.TextField(
                        blank=True,
                        default="",
                        editable=False,
                        verbose_name="Children pks",
                    ),
                ),
                (
                    "tn_children_count",
                    models.PositiveIntegerField(
                        default=0, editable=False, verbose_name="Children count"
                    ),
                ),
                (
                    "tn_depth",
                    models.PositiveIntegerField(
                        default=0,
                        editable=False,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(10),
                        ],
                        verbose_name="Depth",
                    ),
                ),
                (
                    "tn_descendants_pks",
                    models.TextField(
                        blank=True,
                        default="",
                        editable=False,
                        verbose_name="Descendants pks",
                    ),
                ),
                (
                    "tn_descendants_count",
                    models.PositiveIntegerField(
                        default=0, editable=False, verbose_name="Descendants count"
                    ),
                ),
                (
                    "tn_index",
                    models.PositiveIntegerField(
                        default=0, editable=False, verbose_name="Index"
                    ),
                ),
                (
                    "tn_level",
                    models.PositiveIntegerField(
                        default=1,
                        editable=False,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                        verbose_name="Level",
                    ),
                ),
                (
                    "tn_priority",
                    models.PositiveIntegerField(
                        default=0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(9999999999),
                        ],
                        verbose_name="Priority",
                    ),
                ),
                (
                    "tn_order",
                    models.PositiveIntegerField(
                        default=0, editable=False, verbose_name="Order"
                    ),
                ),
                (
                    "tn_siblings_pks",
                    models.TextField(
                        blank=True,
                        default="",
                        editable=False,
                        verbose_name="Siblings pks",
                    ),
                ),
                (
                    "tn_siblings_count",
                    models.PositiveIntegerField(
                        default=0, editable=False, verbose_name="Siblings count"
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "html_classes",
                    models.CharField(
                        blank=True,
                        help_text="Overriden by children. Meant for applying colors to tags. Bootstrap color docs: https://getbootstrap.com/docs/4.6/utilities/colors/",
                        max_length=255,
                        verbose_name="HTML classes",
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True, max_length=200, verbose_name="description"
                    ),
                ),
                (
                    "user_permissions",
                    models.CharField(
                        choices=[("none", "None"), ("view", "View"), ("edit", "Edit")],
                        default="none",
                        help_text="None: users cannot view, add, or remove this tag. View: users can only view this tag. Edit: users can view, add, or remove this tag.",
                        max_length=32,
                    ),
                ),
                (
                    "object_types",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The object type(s) to which this tag can be applied.",
                        related_name="+",
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "tn_parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tn_children",
                        to="tag.tag",
                        verbose_name="Parent",
                    ),
                ),
            ],
            options={
                "verbose_name": "tag",
                "verbose_name_plural": "tags",
            },
        ),
        migrations.CreateModel(
            name="TaggedItem",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "object_id",
                    models.IntegerField(db_index=True, verbose_name="object ID"),
                ),
                (
                    "content_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_tagged_items",
                        to="contenttypes.contenttype",
                        verbose_name="content type",
                    ),
                ),
                (
                    "tag",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_items",
                        to="tag.tag",
                    ),
                ),
            ],
            options={
                "verbose_name": "tagged item",
                "verbose_name_plural": "tagged items",
                "indexes": [
                    models.Index(
                        fields=["content_type", "object_id"],
                        name="tag_taggedi_content_cd6f88_idx",
                    )
                ],
            },
        ),
    ]
